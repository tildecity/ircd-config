/*
 * ########################################################################
 * IMPORTANT NOTE:
 *
 * auth {} blocks MUST be specified in order of precedence. The first one
 * that matches a user will be used. So place spoofs first, then specials,
 * then general access.
 * ########################################################################
 *
 * Shell style (#), C++ style (//) and C style comments are supported.
 *
 * Files may be included by either:
 *        .include "filename"
 *        .include <filename>
 *
 * Times/durations are written as:
 *        12 hours 30 minutes 1 second
 *
 * Valid units of time:
 *        year, month, week, day, hour, minute, second
 *
 * Valid units of size:
 *        megabyte/mbyte/mb, kilobyte/kbyte/kb, byte
 *
 * Sizes and times may be singular or plural.
 */


/*
 * serverinfo {}:  contains information about the server
 */
serverinfo {
	/*
	 * name: the name of this server. This cannot be changed at runtime.
	 */
	name = "tilde.city";

	/*
	 * sid: a server's unique ID. This is three characters long and must
	 * be in the form [0-9][A-Z0-9][A-Z0-9]. The first character must be
	 * a digit, followed by 2 alpha-numerical letters.
	 *
	 * NOTE: The letters must be capitalized. This cannot be changed at runtime.
	 */
	sid = "0HY";

	/*
	 * description: the description of the server.
	 */
	description = "tilde.city IRC server";

	/*
	 * network info: the name and description of the network this server
	 * is on. Shown in the 005 reply and used with serverhiding.
	 */
	network_name = "tilde.city";
	network_desc = "tilde.city";

	/*
	 * hub: allow this server to act as a hub and have multiple servers
	 * connected to it.
	 */
	hub = no;

	/*
	 * vhost: the IP to bind to when we connect outward to ipv4 servers.
	 * This should be an ipv4 IP only, or "*" for INADDR_ANY.
	 */
#	vhost = "192.169.0.1";

	/*
	 * vhost6: the address to bind to when we make outgoing connections
	 * to IPv6 servers. This should be an IPv6 address, or "*" for INADDR_ANY.
	 */
#	vhost6 = "3ffe:80e8:546::2";

	/* max_clients: the maximum number of clients allowed to connect. */
	max_clients = 2048;

	/*
	 * max_nick_length: only applies to local clients. Must be in the
	 * range of 9 to 30. Default is 9 if nothing else is specified.
	 */
	max_nick_length = 20;

	/*
	 * max_topic_length: only applies to topics set by local clients.
	 * Must be in the range of 80 to 300. Default is 80 if nothing
	 * else is specified.
	 */
	max_topic_length = 300;

};

/*
 * admin {}:  contains administrative information about the server
 */
admin {
	name = "Tim Wilde";
	description = "Main Server Administrator";
	email = "twilde@tilde.city";
};

/*
 * class {}:  contains information about classes for users
 */
class {
	/* name: the name of the class. */
	name = "users";

	/*
	 * ping_time: how often a client must reply to a PING from the
	 * server before they are dropped.
	 */
	ping_time = 90 seconds;

	/*
	 * number_per_ip: how many local users are allowed to connect
	 * from a single IP address (optional)
	 */
	number_per_ip = 2048;

	/*
	 * max_local: how many local users are allowed to connect
	 * from a single ident@host (optional)
	 */
	max_local = 2;

	/*
	 * max_global: network-wide limit of users per ident@host (optional)
	 */
	max_global = 10;

	/*
	 * max_number: the maximum number of users allowed in this class (optional)
	 */
	max_number = 2000;

	/*
	 * sendq: the amount of data allowed in a client's send queue before
	 * they are dropped.
	 */
	sendq = 100 kbytes;

	/*
	 * recvq: the amount of data allowed in a client's receive queue before
	 * they are dropped for flooding. Defaults to 2560 if the chosen value
	 * isn't within the range of 512 to 8000.
	 */
	recvq = 2560 bytes;
};

class {
	name = "opers";
	ping_time = 90 seconds;
	number_per_ip = 10;
	max_number = 100;
	sendq = 100 kbytes;

	/*
	 * max_channels: maximum number of channels users in this class can join.
	 */
	max_channels = 60;

	/*
	 * min_idle: minimum idle time that is shown in /whois.
	 */
	min_idle = 3 hours;

	/*
	 * max_idle: maximum idle time that is shown in /whois.
	 */
	max_idle = 8 hours;

	/*
	 * flags:
	 *
	 * random_idle          - a fake idle time is set randomly between
	 *                        min_idle and max_idle
	 * hide_idle_from_opers - the fake idle time will also be shown to operators
	 */
	flags = random_idle, hide_idle_from_opers;
};

class {
	name = "server";
	ping_time = 90 seconds;

	/*
	 * connectfreq: only used in server classes. Specifies the delay
	 * between autoconnecting to servers.
	 */
	connectfreq = 5 minutes;

	/* max number: the number of servers to autoconnect to. */
	max_number = 1;

	/* sendq: servers need a higher sendq as they send more data. */
	sendq = 2 megabytes;
};

/*
 * listen {}:  contains information about the ports ircd listens on
 */
listen {
	/*
	 * port: the port to listen on. If no host is specified earlier
	 * in the listen {} block, it will listen on all available IPs.
	 *
	 * Ports are separated by commas; a range may be specified using ".."
	 */

	/* port: listen on all available IP addresses, ports 6665 to 6669. */
	port = 6665 .. 6669;
};

/*
 * auth {}:  allow users to connect to the ircd
 */
auth {
	/*
	 * user: the user@host allowed to connect. Multiple user
	 * lines are permitted within each auth {} block.
	 */
	user = "*@127.0.0.1";
	#user = "*test@123D:B567:*";

	/* password: an optional password that is required to use this block. */
	#password = "letmein";

	/*
	 * encrypted: controls whether the auth password above has been
	 * encrypted.
	 */
	#encrypted = yes;

	/*
	 * spoof: fake the user's host to this. This is free-form, just do
	 * everyone a favor and don't abuse it. ('=' prefix on /stats I)
	 */
	spoof = "i.love.debian.org";

	/* class: the class the user is placed in. */
	class = "opers";

	/*
	 * need_password - don't allow users who haven't supplied the correct  | ('&' prefix on /stats I if disabled)
	 *                 password to connect using another auth {} block
	 * need_ident    - require the user to have identd to connect          | ('+' prefix on /stats I)
	 * spoof_notice  - enable spoofing notification to admins
	 * exceed_limit  - allow a user to exceed class limits                 | ('>' prefix on /stats I)
	 * kline_exempt  - exempt this user from k/glines                      | ('^' prefix on /stats I)
	 * gline_exempt  - exempt this user from glines                        | ('_' prefix on /stats I)
	 * resv_exempt   - exempt this user from resvs                         | ('$' prefix on /stats I)
	 * no_tilde      - remove ~ from a user with no ident                  | ('-' prefix on /stats I)
	 * can_flood     - allow this user to exceed flood limits              | ('|' prefix on /stats I)
	 * webirc        - enables WEBIRC authentication for web-based         | ('<' prefix on /stats I)
	 *                 clients such as Mibbit
	 */
	flags = need_password, spoof_notice, exceed_limit, kline_exempt,
		gline_exempt, resv_exempt, no_tilde, can_flood;
};

auth {
	user = "*@*";
	class = "users";
	flags = need_ident;
};

/*
 * operator {}:  defines ircd operators
 */
#operator {
#	/* name: the name of the operator */
#	name = "sheep";
#
#	/*
#	 * user: the user@host required for this operator. Multiple user
#	 * lines are permitted within each operator {} block.
#	 */
#	user = "*sheep@192.168.0.0/16";
#	user = "*@127.0.0.0/8";
#
#	/*
#	 * password: the password required to oper. By default this will
#	 * need to be encrypted by using the provided mkpasswd tool.
#	 * Several password hash algorithms are available depending
#	 * on your system's crypt() implementation. For example, a modern
#	 * glibc already has support for the SHA-256/512 and MD5 encryption
#	 * algorithms.
#	 */
#	password = "$5$x5zof8qe.Yc7/bPp$5zIg1Le2Lsgd4CvOjaD20pr5PmcfD7ha/9b2.TaUyG4";
#
#	/*
#	 * encrypted: controls whether the oper password above has been
#	 * encrypted.
#	 */
#	encrypted = yes;
#
#	/* class: the class the oper joins when they successfully /oper */
#	class = "opers";
#
#	/*
#	 * umodes: the default usermodes opers get when they /oper. If defined,
#	 * it will override oper_umodes settings in general {}.
#	 * Available usermodes:
#	 *
#	 * +b - bots         - See bot and drone flooding notices
#	 * +c - cconn        - Client connection/quit notices
#	 * +D - deaf         - Don't receive channel messages
#	 * +d - debug        - See debugging notices
#	 * +e - external     - See remote server connection and split notices
#	 * +F - farconnect   - Remote client connection/quit notices
#	 * +f - full         - See auth {} block full notices
#	 * +G - softcallerid - Server Side Ignore for users not on your channels
#	 * +g - callerid     - Server Side Ignore (for privmsgs etc)
#	 * +H - hidden       - Hides operator status to other users
#	 * +i - invisible    - Not shown in NAMES or WHO unless you share a channel
#	 * +j - rej          - See rejected client notices
#	 * +k - skill        - See server generated KILL messages
#	 * +l - locops       - See LOCOPS messages
#	 * +n - nchange      - See client nick changes
#	 * +p - hidechans    - Hides channel list in WHOIS
#	 * +q - hideidle     - Hides idle and signon time in WHOIS
#	 * +R - nononreg     - Only receive private messages from registered clients
#	 * +s - servnotice   - See general server notices
#	 * +u - unauth       - See unauthorized client notices
#	 * +w - wallop       - See server generated WALLOPS
#	 * +y - spy          - See LINKS, STATS, TRACE notices etc.
#	 * +z - operwall     - See oper generated WALLOPS
#	 */
#	umodes = locops, servnotice, wallop;
#
#	/*
#	 * privileges: controls the activities and commands an oper is
#	 * allowed to do on the server. All flags default to 'no'.
#	 * Available flags:
#	 *
#	 * module         - gives administrator privileges    | ('A' flag)
#	 * connect        - allows local CONNECT              | ('P' flag)
#	 * connect:remote - allows remote CONNECT             | ('Q' flag)
#	 * die            - allows DIE                        | ('D' flag)
#	 * dline          - allows DLINE                      |
#	 * gline          - allows GLINE                      | ('G' flag)
#	 * globops        - allows GLOBOPS                    |
#	 * kill           - allows to KILL local clients      | ('N' flag)
#	 * kill:remote    - allows remote users to be /KILL'd | ('O' flag)
#	 * kline          - allows KLINE                      | ('K' flag)
#	 * locops         - allows LOCOPS                     |
#	 * module         - allows MODULE                     |
#	 * rehash         - allows oper to REHASH config      | ('H' flag)
#	 * remoteban      - allows remote KLINE/UNKLINE       | ('B' flag)
#	 * restart        - allows RESTART                    |
#	 * set            - allows SET                        |
#	 * squit          - allows local SQUIT                | ('R' flag)
#	 * squit:remote   - allows remote SQUIT               | ('S' flag)
#	 * undline        - allows UNDLINE                    |
#	 * unkline        - allows UNKLINE                    | ('U' flag)
#	 * unxline        - allows UNXLINE                    |
#	 * wallops        - allows WALLOPS                    |
#	 * xline          - allows XLINE                      | ('X' flag)
#	 */
#	flags = admin, connect, connect:remote, die, globops, kill, kill:remote,
#		kline, module, rehash, restart, set, unkline, unxline, xline;
#};

operator {
	name = "twilde";
	user = "twilde@127.0.0.1";
	password = "$6$3rpOM8iQK$2MpzS6BM7K7ruMojo7lHTrOkqWpehXHvsUDZtaJSulDVIiAxZ9Z/Ml0BuEUvbWxsD5/pA.Iq2Ig.7D45UdVjt/";
	encrypted = yes;
	class = "opers";
	flags = admin, connect, connect:remote, die, dline, gline, globops,
		kill, kill:remote, kline, locops, module, rehash, restart, set,
		squit, squit:remote, undline, unkline, unxline, wallops, xline;
};

/*
 * kill {}:  users that are not allowed to connect
 * Oper issued klines will be added to the specified kline database
 */
#kill {
#	user = "bad@*.hacked.edu";
#	reason = "Obviously hacked account";
#};

/*
 * deny {}:  IP addresses that are not allowed to connect
 * (before DNS/ident lookup)
 * Oper issued dlines will be added to the specified dline database
 */
#deny {
#	ip = "10.0.1.0/24";
#	reason = "Reconnecting vhosted bots";
#};

/*
 * exempt {}:  IP addresses that are exempt from deny {} and Dlines
 */
#exempt {
#	ip = "192.168.0.0/16";
#};

/*
 * resv {}:  nicks and channels users may not use/join
 */
resv { mask = "clone*"; reason = "Clone bots"; };
resv { mask = "Global"; reason = "Reserved for services"; };
resv { mask = "ChanServ"; reason = "Reserved for services"; };
resv { mask = "NickServ"; reason = "Reserved for services"; };
resv { mask = "OperServ"; reason = "Reserved for services"; };
resv { mask = "MemoServ"; reason = "Reserved for services"; };
resv { mask = "BotServ"; reason = "Reserved for services"; };
resv { mask = "HelpServ"; reason = "Reserved for services"; };
resv { mask = "HostServ"; reason = "Reserved for services"; };
resv { mask = "StatServ"; reason = "Reserved for services"; };
resv { mask = "#*services*"; reason = "Reserved for services"; };

/*
 * gecos {}:  used for banning users based on their "realname".
 */
#gecos {
#	name = "*sex*";
#	reason = "Possible spambot";
#};

#gecos {
#	name = "sub7server";
#	reason = "Trojan drone";
#};

/*
 * channel {}:  the channel block contains options pertaining to channels
 */
channel {
	/*
	 * disable_fake_channels: this option, if set to 'yes', will
	 * disallow clients from creating or joining channels that have one
	 * of the following ASCII characters in their name:
	 *
	 *   2 | bold
	 *   3 | mirc color
	 *  15 | plain text
	 *  22 | reverse
	 *  29 | italic
	 *  31 | underline
	 * 160 | non-breaking space
	 */
	disable_fake_channels = yes;

	/*
	 * invite_client_count, invite_client_time: how many INVITE commands
	 * are permitted per client per invite_client_time.
	 */
	invite_client_count = 10;
	invite_client_time = 5 minutes;

	/*
	 * knock_client_count, knock_client_time: how many KNOCK commands
	 * are permitted per client per knock_client_time.
	 */
	knock_client_count = 1;
	knock_client_time = 5 minutes;

	/*
	 * knock_delay_channel: how often a KNOCK to any specific channel
	 * is permitted, regardless of the user sending the KNOCK.
	 */
	knock_delay_channel = 1 minute;

	/*
	 * max_channels: the maximum number of channels a user can join/be on.
	 * This is a default value which can be overriden with class {} blocks.
	 */
	max_channels = 25;

	/* max_bans: maximum number of +b/e/I modes in a channel */
	max_bans = 100;

	/*
	 * how many joins in how many seconds constitute a flood. Use 0 to
	 * disable. +b opers will be notified (changeable via /set)
	 */
	join_flood_count = 16;
	join_flood_time = 8 seconds;

	/*
	 * The ircd will now check splitmode (whether a server is split from
	 * the network) every few seconds; this functionality is known as
	 * splitcode and is influenced by the options below.
	 *
	 * Either split users or split servers can activate splitmode, but
	 * both conditions must be met for the ircd to deactivate splitmode.
	 *
	 * You may force splitmode to be permanent by /quote set splitmode on
	 */

	/*
	 * default_split_user_count: when the usercount is lower than this level,
	 * consider ourselves split. This must be set for automatic splitmode.
	 */
	default_split_user_count = 0;

	/*
	 * default_split_server_count: when the servercount is lower than this,
	 * consider ourselves split. This must be set for automatic splitmode.
	 */
	default_split_server_count = 0;

	/* no_create_on_split: do not allow users to create channels on split. */
	no_create_on_split = yes;

	/* no_join_on_split: do not allow users to join channels on a split. */
	no_join_on_split = no;
};

/*
 * general {}:  the general block contains many of the options that were once
 * compiled in options in config.h
 */
general {
	/*
	 * cycle_on_host_change: sends a fake QUIT/JOIN combination
	 * when services change the hostname of a specific client.
	 */
	cycle_on_host_change = yes;

	/* max_watch: maximum WATCH entries a client can have. */
	max_watch = 30;

	/* max_accept: maximum allowed /accept's for +g usermode. */
	max_accept = 30;

	/* gline_enable: enable glines (network-wide temporary klines). */
	gline_enable = yes;

	/*
	 * gline_duration: the amount of time a G-line will remain on your
	 * server before expiring.
	 */
	gline_duration = 1 day;

	/*
	 * gline_request_duration: how long a pending G-line can be around.
	 * 10 minutes should be plenty.
	 */
	gline_request_duration = 10 minutes;

	/*
	 * gline_min_cidr: the minimum required length of a CIDR bitmask
	 * for IPv4 based G-lines.
	 */
	gline_min_cidr = 16;

	/*
	 * gline_min_cidr6: the minimum required length of a CIDR bitmask
	 * for IPv6 based G-lines.
	 */
	gline_min_cidr6 = 48;

	/*
	 * invisible_on_connect: whether to automatically set mode +i on
	 * connecting users.
	 */
	invisible_on_connect = no;

	/*
	 * kill_chase_time_limit: KILL chasing is a feature whereby a KILL
	 * issued for a user who has recently changed nickname will be applied
	 * automatically to the new nick. kill_chase_time_limit is the maximum
	 * time following a nickname change that this chasing will apply.
	 */
	kill_chase_time_limit = 30 seconds;

	/*
	 * hide_spoof_ips: if disabled, opers will be allowed to see the real
	 * IP address of spoofed users in /trace etc. If this is defined they
	 * will be shown a masked IP.
	 */
	hide_spoof_ips = yes;

	/*
	 * ignore_bogus_ts: ignore bogus timestamps from other servers.
	 * Yes, this will desync the network, but it will allow chanops
	 * to resync with a valid non TS 0.
	 *
	 * This should be enabled network wide, or not at all.
	 */
	ignore_bogus_ts = no;

	/*
	 * disable_auth: completely disable ident lookups; if you enable this,
	 * be careful of what you set need_ident to in your auth {} blocks
	 */
	disable_auth = no;

	/*
	 * tkline_expire_notices: enables or disables temporary kline/xline
	 * expire notices.
	 */
	tkline_expire_notices = no;

	/*
	 * default_floodcount: the default value of floodcount that is configurable
	 * via /quote set floodcount. This is the number of lines a user may send
	 * to any other user/channel in one second.
	 */
	default_floodcount = 10;

	/*
	 * failed_oper_notice: send a notice to all opers on the server when
	 * someone tries to OPER and uses the wrong password, host or ident.
	 */
	failed_oper_notice = yes;

	/*
	 * dots_in_ident: the number of '.' characters permitted in an ident
	 * reply before the user is rejected.
	 */
	dots_in_ident = 2;

	/*
	 * min_nonwildcard: the minimum number of non-wildcard characters in
	 * k/d/g lines placed via the server. K-lines hand-placed are exempt from
	 * this limit.
	 * Wildcard characters: '.', ':', '*', '?', '@', '!'
	 */
	min_nonwildcard = 4;

	/*
	 * min_nonwildcard_simple: the minimum number of non-wildcard characters
	 * in gecos bans. Wildcard characters: '*', '?'
	 */
	min_nonwildcard_simple = 3;

	/* anti_nick_flood: enable the nickflood control code. */
	anti_nick_flood = yes;

	/* nick flood: the number of nick changes allowed in the specified period. */
	max_nick_time = 20 seconds;
	max_nick_changes = 5;

	/*
	 * away_count, away_time: how many AWAY command are permitted per
	 * client per away_time.
	 */
	away_count = 2;
	away_time = 10 seconds;

	/*
	 * anti_spam_exit_message_time: the minimum time a user must be connected
	 * before custom quit messages are allowed.
	 */
	anti_spam_exit_message_time = 5 minutes;

	/*
	 * ts_warn_delta, ts_max_delta: the time delta allowed between server
	 * clocks before a warning is given, or before the link is dropped.
	 * All servers should run ntpdate/rdate to keep clocks in sync.
	 */
	ts_warn_delta = 3 seconds;
	ts_max_delta = 15 seconds;

	/*
	 * warn_no_connect_block: warn opers about servers that try to connect
	 * but for which we don't have a connect {} block. Twits with
	 * misconfigured servers can become really annoying with this enabled.
	 */
	warn_no_connect_block = yes;

	/*
	 * stats_e_disabled: set this to 'yes' to disable "STATS e" for both
	 * operators and administrators. Doing so is a good idea in case
	 * there are any exempted (exempt {}) server IPs you don't want to
	 * see leaked.
	 */
	stats_e_disabled = no;

	/* stats_o_oper only: make stats o (opers) oper only. */
	stats_o_oper_only = yes;

	/* stats_P_oper_only: make stats P (ports) oper only. */
	stats_P_oper_only = yes;

	/* stats_u_oper_only: make stats u (uptime) oper only. */
	stats_u_oper_only = no;

	/*
	 * stats_i_oper_only: make stats i (auth {}) oper only. Set to:
	 *     yes    - show users no auth {} blocks, made oper only
	 *     masked - show users the first matching auth {} block
	 *     no     - show users all auth {} blocks
	 */
	stats_i_oper_only = yes;

	/*
	 * stats_k_oper_only: make stats k/K (klines) oper only. Set to:
	 *     yes    - show users no auth {} blocks, made oper only
	 *     masked - show users the first matching auth {} block
	 *     no     - show users all auth {} blocks.
	 */
	stats_k_oper_only = yes;

	/*
	 * caller_id_wait: time between notifying a +g user that somebody
	 * is messaging them.
	 */
	caller_id_wait = 1 minute;

	/*
	 * opers_bypass_callerid: allows operators to bypass +g and message
	 * anyone who has it set (useful if you use services).
	 */
	opers_bypass_callerid = no;

	/*
	 * pace_wait_simple: minimum time required between use of less
	 * intensive commands
	 * (ADMIN, HELP, LUSERS, VERSION, remote WHOIS)
	 */
	pace_wait_simple = 1 second;

	/*
	 * pace_wait: minimum time required between use of more intensive commands
	 * (INFO, LINKS, MAP, MOTD, STATS, WHO, WHOWAS)
	 */
	pace_wait = 10 seconds;

	/*
	 * short_motd: send clients a notice telling them to read the MOTD
	 * instead of forcing an MOTD to clients who may simply ignore it.
	 */
	short_motd = no;

	/*
	 * ping_cookie: require clients to respond exactly to a PING command,
	 * can help block certain types of drones and FTP PASV mode spoofing.
	 */
	ping_cookie = no;

	/* no_oper_flood: increase flood limits for opers. */
	no_oper_flood = yes;

	/*
	 * true_no_oper_flood: completely eliminate flood limits for opers
	 * and for clients with can_flood = yes in their auth {} blocks.
	 */
	true_no_oper_flood = yes;

	/* oper_pass_resv: allow opers to over-ride RESVs on nicks/channels. */
	oper_pass_resv = yes;

	/*
	 * max_targets: the maximum number of targets in a single
	 * PRIVMSG/NOTICE. Set to 999 NOT 0 for unlimited.
	 */
	max_targets = 4;

	/*
	 * usermodes configurable: a list of usermodes for the options below
	 *
	 * +b - bots         - See bot and drone flooding notices
	 * +c - cconn        - Client connection/quit notices
	 * +D - deaf         - Don't receive channel messages
	 * +d - debug        - See debugging notices
	 * +e - external     - See remote server connection and split notices
	 * +F - farconnect   - Remote client connection/quit notices
	 * +f - full         - See auth {} block full notices
	 * +G - softcallerid - Server Side Ignore for users not on your channels
	 * +g - callerid     - Server Side Ignore (for privmsgs etc)
	 * +H - hidden       - Hides operator status to other users
	 * +i - invisible    - Not shown in NAMES or WHO unless you share a channel
	 * +j - rej          - See rejected client notices
	 * +k - skill        - See server generated KILL messages
	 * +l - locops       - See LOCOPS messages
	 * +n - nchange      - See client nick changes
	 * +p - hidechans    - Hides channel list in WHOIS
	 * +q - hideidle     - Hides idle and signon time in WHOIS
	 * +R - nononreg     - Only receive private messages from registered clients
	 * +s - servnotice   - See general server notices
	 * +u - unauth       - See unauthorized client notices
	 * +w - wallop       - See server generated WALLOPS
	 * +y - spy          - See LINKS, STATS, TRACE notices etc.
	 */

	/* oper_only_umodes: usermodes only operators may set. */
	oper_only_umodes = bots, cconn, debug, external, farconnect, full, hidden, locops,
			nchange, rej, skill, spy, unauth;

	/* oper_umodes: default usermodes operators get when they /oper or /challenge. */
	oper_umodes = bots, locops, servnotice, wallop;

	/*
	 * throttle_count: the maximum number of connections from the same
	 * IP address allowed in throttle_time duration.
	 */
	 throttle_count = 1;

	/*
	 * throttle_time: the minimum amount of time required between
	 * connections from the same IP address. exempt {} blocks are
	 * excluded from this throttling.
	 * Offers protection against flooders who reconnect quickly.
	 * Set to 0 to disable.
	 */
	throttle_time = 2 seconds;
};

modules {
	/*
	 * path: other paths to search for modules specified below
	 * and in "/module load".
	 */
	path = "/usr/lib/ircd-hybrid/modules";
	path = "/usr/lib/ircd-hybrid/modules/autoload";

	/* module: the name of a module to load on startup/rehash. */
#	module = "some_module.la";
};

/*
 * log {}:  contains information about logfiles.
 */
log {
	/* Do you want to enable logging to ircd.log? */
	use_logging = yes;

	file {
		type = oper;
		name = "/var/log/ircd/ircd-hybrid-oper.log";
		size = 10 megabytes;
	};

	file {
		type = user;
		name = "/var/log/ircd/ircd-hybrid-user.log";
		size = 10 megabytes;
	};

	file {
		type = kill;
		name = "/var/log/ircd/ircd-hybrid-kill.log";
		size = 10 megabytes;
	};

	file {
		type = kline;
		name = "/var/log/ircd/ircd-hybrid-kline.log";
		size = 10 megabytes;
	};

	file {
		type = dline;
		name = "/var/log/ircd/ircd-hybrid-dline.log";
		size = 10 megabytes;
	};

	file {
		type = gline;
		name = "/var/log/ircd/ircd-hybrid-gline.log";
		size = 10 megabytes;
	};

	file {
		type = xline;
		name = "/var/log/ircd/ircd-hybrid-xline.log";
		size = 10 megabytes;
	};

	file {
		type = resv;
		name = "/var/log/ircd/ircd-hybrid-resv.log";
		size = 10 megabytes;
	};

	file {
		type = debug;
		name = "/var/log/ircd/ircd-hybrid-debug.log";
		size = 10 megabytes;
	};
};
